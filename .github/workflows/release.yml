name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3

permissions:
  contents: write  # Required for creating releases
  pages: write     # Required for GitHub Pages
  id-token: write  # Required for PyPI trusted publishing and Pages

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Test with pytest
      env:
        OPEN_TO_CLOSE_API_KEY: ${{ secrets.OPEN_TO_CLOSE_API_KEY }}
      run: |
        pytest --cov=open_to_close --cov-report=term-missing

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Verify version consistency
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Tag version: $TAG_VERSION"
        
        # Extract version from pyproject.toml
        PYPROJECT_VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        
        # Extract version from __init__.py
        INIT_VERSION=$(grep -E '^__version__ = ' open_to_close/__init__.py | sed 's/__version__ = "\(.*\)"/\1/')
        echo "__init__.py version: $INIT_VERSION"
        
        # Check if all versions match
        if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ] || [ "$TAG_VERSION" != "$INIT_VERSION" ]; then
          echo "Version mismatch detected!"
          echo "Tag: $TAG_VERSION"
          echo "pyproject.toml: $PYPROJECT_VERSION" 
          echo "__init__.py: $INIT_VERSION"
          exit 1
        fi
        
        echo "All versions match: $TAG_VERSION"

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  build-docs:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Build documentation
      run: |
        mkdocs build --clean --verbose

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docs
        path: site/

  publish-pypi:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true  # Don't fail the entire workflow if PyPI fails
    # environment: release  # Commented out to simplify trusted publishing setup
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI (Trusted Publishing)
      id: pypi-publish
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        attestations: true
        # Uncomment to publish to Test PyPI first
        # repository-url: https://test.pypi.org/legacy/

    - name: PyPI publish status
      run: |
        if [ "${{ steps.pypi-publish.outcome }}" == "success" ]; then
          echo "‚úÖ Successfully published to PyPI"
          echo "PYPI_SUCCESS=true" >> $GITHUB_ENV
        else
          echo "‚ùå PyPI publishing failed - continuing with release"
          echo "PYPI_SUCCESS=false" >> $GITHUB_ENV
        fi

  publish-pypi-fallback:
    runs-on: ubuntu-latest
    needs: [build, publish-pypi]
    if: needs.publish-pypi.result == 'failure'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Manual PyPI publishing instructions
      run: |
        echo "üîß PyPI Trusted Publishing failed. Manual publishing options:"
        echo ""
        echo "Option 1: Fix Trusted Publishing"
        echo "1. Go to https://pypi.org/manage/project/open-to-close/settings/publishing/"
        echo "2. Add publisher with these settings:"
        echo "   - Owner: theperrygroup" 
        echo "   - Repository: open-to-close"
        echo "   - Workflow: release.yml"
        echo "   - Environment: release"
        echo ""
        echo "Option 2: Manual upload with API token"
        echo "1. Download artifacts from this workflow"
        echo "2. Run: twine upload dist/* --username __token__ --password YOUR_API_TOKEN"
        echo ""
        echo "Option 3: Use GitHub CLI"
        echo "1. gh run download ${{ github.run_id }} --name dist"
        echo "2. twine upload dist/*"

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: always() && needs.build-docs.result == 'success'  # Deploy docs even if PyPI fails
    
    steps:
    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: docs
        path: site/

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: site/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Documentation deployment status
      run: |
        echo "üìö Documentation deployed successfully!"
        echo "üîó Available at: ${{ steps.deployment.outputs.page_url }}"

  create-github-release:
    runs-on: ubuntu-latest
    needs: [build, publish-pypi]  # Only depends on build, not PyPI success
    if: always() && needs.build.result == 'success'  # Create release even if PyPI fails
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Check PyPI status
        PYPI_STATUS="${{ needs.publish-pypi.result }}"
        
        # Generate changelog
        echo "## Changes in $VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Commits since $LAST_TAG:" >> CHANGELOG.md
          git log --pretty=format:"- %s" $LAST_TAG..HEAD >> CHANGELOG.md
        else
          echo "### Initial release" >> CHANGELOG.md
          git log --pretty=format:"- %s" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "### Package Information" >> CHANGELOG.md
        echo "- **Python Support**: 3.8 - 3.12" >> CHANGELOG.md
        
        if [ "$PYPI_STATUS" == "success" ]; then
          echo "- **PyPI Package**: ‚úÖ [open-to-close $VERSION](https://pypi.org/project/open-to-close/$VERSION/)" >> CHANGELOG.md
        else
          echo "- **PyPI Package**: ‚ö†Ô∏è Publishing failed - manual upload required" >> CHANGELOG.md
          echo "- **Manual Upload**: Download artifacts and use \`twine upload dist/*\`" >> CHANGELOG.md
        fi
        
        echo "- **Documentation**: üìö [GitHub Pages](https://theperrygroup.github.io/open-to-close/)" >> CHANGELOG.md
        echo "- **Source Code**: üîó [GitHub Repository](https://github.com/theperrygroup/open-to-close)" >> CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Open To Close API ${{ steps.changelog.outputs.VERSION }}
        body_path: CHANGELOG.md
        files: |
          dist/*.tar.gz
          dist/*.whl
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}  # Mark as prerelease if version contains '-' (e.g., v1.0.0-beta)
        generate_release_notes: true  # Auto-generate additional release notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    runs-on: ubuntu-latest
    needs: [publish-pypi, create-github-release, deploy-docs]
    if: always()  # Run even if previous jobs fail
    
    steps:
    - name: Release summary
      run: |
        echo "üìä Release Summary for ${GITHUB_REF#refs/tags/}"
        echo "=================================="
        echo "PyPI Publishing: ${{ needs.publish-pypi.result }}"
        echo "GitHub Release: ${{ needs.create-github-release.result }}"
        echo "Documentation: ${{ needs.deploy-docs.result }}"
        echo ""
        
        if [ "${{ needs.publish-pypi.result }}" == "success" ]; then
          echo "‚úÖ PyPI: Successfully published"
          echo "üì¶ Available at: https://pypi.org/project/open-to-close/"
        else
          echo "‚ùå PyPI: Publishing failed - manual upload required"
          echo "üìã Download artifacts from this workflow and run: twine upload dist/*"
        fi
        
        if [ "${{ needs.create-github-release.result }}" == "success" ]; then
          echo "‚úÖ GitHub: Release created successfully"
        else
          echo "‚ùå GitHub: Release creation failed"
        fi
        
        if [ "${{ needs.deploy-docs.result }}" == "success" ]; then
          echo "‚úÖ Documentation: Deployed to GitHub Pages"
          echo "üìö Available at: https://theperrygroup.github.io/open-to-close/"
        else
          echo "‚ùå Documentation: Deployment failed"
        fi

    - name: Setup environment for manual PyPI upload
      if: needs.publish-pypi.result == 'failure'
      run: |
        echo ""
        echo "üîß Manual PyPI Upload Instructions:"
        echo "===================================="
        echo "1. Download the 'dist' artifact from this workflow run"
        echo "2. Extract the files locally"
        echo "3. Install twine: pip install twine"
        echo "4. Upload to PyPI:"
        echo "   twine upload dist/* --username __token__ --password YOUR_PYPI_API_TOKEN"
        echo ""
        echo "OR fix trusted publishing:"
        echo "1. Go to: https://pypi.org/manage/project/open-to-close/settings/publishing/"
        echo "2. Add publisher:"
        echo "   - Owner: theperrygroup"
        echo "   - Repository: open-to-close" 
        echo "   - Workflow: release.yml"
        echo "   - Environment: release"
        echo "3. Re-run this workflow" 